generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                   @id @default(autoincrement())
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?
  image                 String?               @default(value: "avatar.png")
  hashedPassword        String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  favoriteIds           Int[]
  role                  Role                  @default(USER)
  accounts              Account[]
  accommodation         Accommodation[]
  experienceBooking     ExperienceBooking[]
  accommodationBooking  AccommodationBooking[]
  following             Follows[]             @relation("follower")
  followedBy            Follows[]             @relation("following")
  sessions              Session[]
  ratingsGiven          Review[]
  experienceProvider    ExperienceProvider[]
}

model Account {
  id                       Int    @id @default(autoincrement())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  password                 String?
  user                     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follows {
  followerId  Int
  followingId Int
  follower    User   @relation("follower", fields: [followerId], references: [id])
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Accommodation {
  id                 Int                  @id @default(autoincrement())
  userId             Int
  title              String
  slug               String               @unique
  tags               String[]
  description        String
  summary            String
  includes           String[]
  guestRequirements  String[]
  cancellationPolicy String
  ratingsAverage     Float                @default(0)
  ratingsCount       Int
  price              Int?
  priceDiscount      Int?
  imageCover         String
  imageGallery       String[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  category           String
  roomCount          Int
  bathroomCount      Int
  guestCount         Int
  location           String
  lat                Float?
  lng                Float?
  startDate          DateTime?
  endDate            DateTime?
  reviews            Review[]

  user         User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations AccommodationBooking[]
}

model AccommodationBooking {
  id              Int                  @id @default(autoincrement())
  userId          Int
  accommodationId Int
  startDate       DateTime
  endDate         DateTime
  totalPrice      Int
  createdAt       DateTime             @default(now())

  user          User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  accommodation Accommodation          @relation(fields: [accommodationId], references: [id], onDelete: Cascade)
}

model Experience {
  id                 Int                  @id @default(autoincrement())
  title              String
  slug               String               @unique
  tags               String[]
  description        String
  summary            String
  duration           Int
  includes           String[]
  guestRequirements  String[]
  whatToBring        String[]
  cancellationPolicy String
  ratingsAverage     Float                @default(0)
  ratingsCount       Int
  price              Int?
  priceDiscount      Int?
  imageCover         String
  imageGallery       String[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  location           String
  lat                Float?
  lng                Float?
  experienceProvider ExperienceProvider[]
  startDate          DateTime?
  endDate            DateTime?
  reviews            Review[]
  experienceBooking  ExperienceBooking[]
}

model ExperienceBooking {
  id            Int                  @id @default(autoincrement())
  userId        Int
  experienceId  Int
  startDate     DateTime
  endDate       DateTime
  totalPrice    Int
  createdAt     DateTime             @default(now())

  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  experience  Experience             @relation(fields: [experienceId], references: [id], onDelete: Cascade)
}

model Review {
  id               Int                  @id @default(autoincrement())
  userId           Int
  rating           Int
  comment          String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  experience       Experience           @relation(fields: [experienceId], references: [id])
  accommodation    Accommodation        @relation(fields: [accommodationId], references: [id])
  accommodationId  Int
  experienceId     Int
  user             User                 @relation(fields: [userId], references: [id])
}

model ExperienceProvider {
  id           Int                  @id @default(autoincrement())
  userId       Int
  businessName String
  description  String
  experience   Experience           @relation(fields: [experienceId], references: [id])
  experienceId Int
  user         User                 @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  PROVIDER
  ADMIN
}
